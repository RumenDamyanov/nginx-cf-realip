name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag (e.g. v0.1.0) to build'
        required: false
        default: ''
      create_release:
        description: 'Create GitHub Release (true/false)'
        required: false
        default: 'true'

permissions:
  contents: write

jobs:
  build-release:
    outputs:
      tag_name: ${{ steps.resolve_tag.outputs.tag_name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ubuntu: [jammy, noble, plucky]
        nginx_version: [1.27.0, 1.28.0]
        arch: [amd64, arm64]
    env:
      NGINX_VERSION: ${{ matrix.nginx_version }}
      UBUNTU_CODENAME: ${{ matrix.ubuntu }}
      TARGET_ARCH: ${{ matrix.arch }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Resolve tag (input or latest)
        id: resolve_tag
        run: |
          set -euo pipefail
          INPUT_TAG='${{ inputs.tag }}'
          if [ -n "$INPUT_TAG" ]; then
            TAG_NAME="$INPUT_TAG"
          else
            git fetch --tags --force
            TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || true)
            if [ -z "$TAG_NAME" ]; then echo 'No tag provided and no existing tags found.' >&2; exit 1; fi
          fi
            echo "Using tag: $TAG_NAME"
            git checkout "$TAG_NAME"
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Determine base image
        id: base
        run: |
          case "${UBUNTU_CODENAME}" in
            jammy) echo "image=ubuntu:22.04" >> $GITHUB_OUTPUT ;;
            noble) echo "image=ubuntu:24.04" >> $GITHUB_OUTPUT ;;
            plucky) echo "image=ubuntu:24.10" >> $GITHUB_OUTPUT ;;
            *) echo "Unknown codename"; exit 1 ;;
          esac

      - name: Build module
        run: |
          set -euxo pipefail
          WORKDIR=$PWD
          docker run --platform=linux/${TARGET_ARCH} --rm -v "$WORKDIR":/workspace -w /workspace $(echo '${{ steps.base.outputs.image }}') /bin/bash -c "\
            set -euxo pipefail; \
            apt-get update; \
            DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential wget libpcre3-dev zlib1g-dev libssl-dev libcurl4-openssl-dev ca-certificates file; \
            mkdir -p release/build/${NGINX_VERSION}/${UBUNTU_CODENAME}/${TARGET_ARCH}; cd release/build/${NGINX_VERSION}/${UBUNTU_CODENAME}/${TARGET_ARCH}; \
            wget -nv https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz; \
            tar xzf nginx-${NGINX_VERSION}.tar.gz; cd nginx-${NGINX_VERSION}; \
            ./configure --add-dynamic-module=/workspace/src --with-http_realip_module; \
            make modules -j$(nproc); \
            cp objs/ngx_http_cf_realip_module.so /workspace/ngx_http_cf_realip_module-nginx${NGINX_VERSION}-ubuntu-${UBUNTU_CODENAME}-${TARGET_ARCH}.so; \
            file objs/ngx_http_cf_realip_module.so; \
          "

      - name: Package artifact
        run: |
          set -euxo pipefail
          VER=${TAG_NAME#v}
          FN_BASE=nginx-cf-realip_${VER}_nginx${NGINX_VERSION}_${UBUNTU_CODENAME}_${TARGET_ARCH}
          mkdir -p pkg
          cp LICENSE.md README.md CHANGELOG.md pkg/ || true
          cp ngx_http_cf_realip_module-nginx${NGINX_VERSION}-ubuntu-${UBUNTU_CODENAME}-${TARGET_ARCH}.so pkg/
          cat > pkg/BUILDINFO.json <<EOF
          {
            "moduleVersion": "${VER}",
            "nginxVersion": "${NGINX_VERSION}",
            "ubuntuCodename": "${UBUNTU_CODENAME}",
            "arch": "${TARGET_ARCH}",
            "gitCommit": "${GITHUB_SHA}",
            "buildTimeUtc": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "toolchain": "gcc $(gcc -dumpversion)",
            "libcurl": "$(curl --version | head -n1 || true)"
          }
          EOF
          tar czf ${FN_BASE}.tar.gz -C pkg .
          sha256sum ${FN_BASE}.tar.gz >> SHA256SUMS

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.nginx_version }}-${{ matrix.ubuntu }}-${{ matrix.arch }}
          path: |
            *.tar.gz
            SHA256SUMS

  publish:
    runs-on: ubuntu-latest
    needs: build-release
    if: ${{ inputs.create_release == 'true' }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: collected

      - name: Consolidate checksums
        run: |
          set -euo pipefail
          find collected -name SHA256SUMS -exec cat {} + > ALL_SHA256SUMS
          sort -u ALL_SHA256SUMS > SHA256SUMS

      - name: Generate Release Notes
        id: notes
        run: |
          echo 'notes<<EOF' >> $GITHUB_OUTPUT
          echo 'Manual release build artifacts:' >> $GITHUB_OUTPUT
          find collected -name '*.tar.gz' -printf '%f\n' | sort >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo 'SHA256 checksums:' >> $GITHUB_OUTPUT
          cat SHA256SUMS >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-release.outputs.tag_name }}
          name: ${{ needs.build-release.outputs.tag_name }}
          body: ${{ steps.notes.outputs.notes }}
          files: |
            collected/**/*.tar.gz
            SHA256SUMS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
